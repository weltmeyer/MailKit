<Type Name="ImapClient" FullName="MailKit.Net.Imap.ImapClient">
  <TypeSignature Language="C#" Value="public class ImapClient : MailKit.MailStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImapClient extends MailKit.MailStore" />
  <AssemblyInfo>
    <AssemblyName>MailKit</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MailKit.MailStore</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <summary>
            An IMAP client that can be used to retrieve messages from a server.
            </summary>
    <remarks>
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> class supports both the "imap" and "imaps"
            protocols. The "imap" protocol makes a clear-text connection to the IMAP
            server and does not use SSL or TLS unless the IMAP server supports the
            STARTTLS extension (as defined by rfc3501). The "imaps" protocol,
            however, connects to the IMAP server using an SSL-wrapped connection.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImapClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapClient" /> class.
            </summary>
        <remarks>
            Before you can retrieve messages with the <see cref="T:MailKit.Net.Imap.ImapClient" />, you must first
            call the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)" /> method and authenticate with
            the <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)" /> method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImapClient (MailKit.IProtocolLogger protocolLogger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MailKit.IProtocolLogger protocolLogger) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="protocolLogger" Type="MailKit.IProtocolLogger" />
      </Parameters>
      <Docs>
        <param name="protocolLogger">The protocol logger.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapClient" /> class.
            </summary>
        <remarks>
            Before you can retrieve messages with the <see cref="T:MailKit.Net.Imap.ImapClient" />, you must first
            call the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)" /> method and authenticate with
            the <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)" /> method.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="protocolLogger" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public override void Authenticate (System.Net.ICredentials credentials, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Authenticate(class System.Net.ICredentials credentials, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="credentials">The user's credentials.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Authenticate using the supplied credentials.
            </summary>
        <remarks>
          <para>If the server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
          <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then LOGIN command is used as a fallback.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credentials" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected or is already authenticated.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
        <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationMechanisms">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.HashSet&lt;string&gt; AuthenticationMechanisms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.HashSet`1&lt;string&gt; AuthenticationMechanisms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the authentication mechanisms supported by the IMAP server.
            </summary>
        <value>The authentication mechanisms.</value>
        <remarks>
            The authentication mechanisms are queried as part of the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)" /> method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Capabilities">
      <MemberSignature Language="C#" Value="public MailKit.Net.Imap.ImapCapabilities Capabilities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MailKit.Net.Imap.ImapCapabilities Capabilities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MailKit.Net.Imap.ImapCapabilities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the capabilities supported by the IMAP server.
            </summary>
        <value>The capabilities.</value>
        <remarks>
            The capabilities will not be known until a successful connection has been made via
            the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)" /> method and may change as a side-effect
            of the <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)" /> method.
            </remarks>
        <exception cref="T:System.ArgumentException">
            Capabilities cannot be enabled, they may only be disabled.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public override void Connect (Uri uri, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Connect(class System.Uri uri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uri">The server URI. The <see cref="P:System.Uri.Scheme" /> should either
            be "imap" to make a clear-text connection or "imaps" to make an SSL connection.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Connect to the specified server.
            </summary>
        <remarks>
          <para>Establishes a connection to an IMAP or IMAP/S server. If the schema
            in the uri is "imap", a clear-text connection is made and defaults to using
            port 143 if no port is specified in the URI. However, if the schema in the
            uri is "imaps", an SSL connection is made using the
            <see cref="P:MailKit.MailService.ClientCertificates" /> and defaults to port 993 unless a port
            is specified in the URI.</para>
          <para>It should be noted that when using a clear-text IMAP connection,
            if the server advertizes support for the STARTTLS extension, the client
            will automatically switch into TLS mode before authenticating unless the
            <paramref name="uri" /> contains a query string to disable it.</para>
          <para>If the IMAP server advertizes the COMPRESS extension and either does not
            support the STARTTLS extension or the <paramref name="uri" /> explicitly disabled
            the use of the STARTTLS extension, then the client will automatically opt into
            using a compressed data connection to optimize bandwidth usage unless the
            <paramref name="uri" /> contains a query string to explicitly disable it.</para>
          <para>If a successful connection is made, the <see cref="P:MailKit.Net.Imap.ImapClient.AuthenticationMechanisms" />
            and <see cref="P:MailKit.Net.Imap.ImapClient.Capabilities" /> properties will be populated.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> is already connected.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="uri" /> is not an absolute URI.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public override void Disconnect (bool quit, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Disconnect(bool quit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quit" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="quit">If set to <c>true</c>, a "LOGOUT" command will be issued in order to disconnect cleanly.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Disconnect the service.
            </summary>
        <remarks>
            If <paramref name="quit" /> is <c>true</c>, a "LOGOUT" command will be issued in order to disconnect cleanly.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Imap.ImapClient" /> and
            optionally releases the managed resources.
            </summary>
        <remarks>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Imap.ImapClient" /> and
            optionally releases the managed resources.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableQuickResync">
      <MemberSignature Language="C#" Value="public override void EnableQuickResync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnableQuickResync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Enable the QRESYNC feature.
            </summary>
        <remarks>
          <para>The QRESYNC extension improves resynchronization performance of folders by
            querying the IMAP server for a list of changes when the folder is opened using the
            <see cref="M:MailKit.Net.Imap.ImapFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)" />
            method.</para>
          <para>If this feature is enabled, the <see cref="E:MailKit.MailFolder.MessageExpunged" /> event is replaced
            with the <see cref="E:MailKit.MailFolder.MessagesVanished" /> event.</para>
          <para>This method needs to be called immediately after
            <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)" />, before the opening of any folders.</para>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected, not authenticated, or a folder has been selected.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the QRESYNC extension.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="EnableUTF8">
      <MemberSignature Language="C#" Value="public void EnableUTF8 (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableUTF8(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Enable the UTF8=ACCEPT extension.
            </summary>
        <remarks>
            Enables the UTF8=ACCEPT extension.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected, not authenticated, or a folder has been selected.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the UTF8=ACCEPT extension.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="EnableUTF8Async">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task EnableUTF8Async (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task EnableUTF8Async(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Enable the UTF8=ACCEPT extension.
            </summary>
        <returns>An asynchronous task context.</returns>
        <remarks>
            Enables the UTF8=ACCEPT extension.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected, not authenticated, or a folder has been selected.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the UTF8=ACCEPT extension.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFolder">
      <MemberSignature Language="C#" Value="public override MailKit.IMailFolder GetFolder (MailKit.FolderNamespace namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class MailKit.IMailFolder GetFolder(class MailKit.FolderNamespace namespace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MailKit.IMailFolder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespace" Type="MailKit.FolderNamespace" />
      </Parameters>
      <Docs>
        <param name="namespace">The namespace.</param>
        <summary>
            Get the folder for the specified namespace.
            </summary>
        <returns>The folder.</returns>
        <remarks>
            Gets the folder for the specified namespace.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="namespace" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected.</para>
          <para>-or-</para>
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not authenticated.</para>
        </exception>
        <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFolder">
      <MemberSignature Language="C#" Value="public override MailKit.IMailFolder GetFolder (MailKit.SpecialFolder folder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class MailKit.IMailFolder GetFolder(valuetype MailKit.SpecialFolder folder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MailKit.IMailFolder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folder" Type="MailKit.SpecialFolder" />
      </Parameters>
      <Docs>
        <param name="folder">The type of special folder.</param>
        <summary>
            Get the specified special folder.
            </summary>
        <returns>The folder if available; otherwise <c>null</c>.</returns>
        <remarks>
            Not all IMAP servers support special folders. Only IMAP servers
            supporting the <see cref="F:MailKit.Net.Imap.ImapCapabilities.SpecialUse" /> or
            <see cref="F:MailKit.Net.Imap.ImapCapabilities.XList" /> extensions may have
            special folders.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="folder" /> is out of range.
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected.</para>
          <para>-or-</para>
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not authenticated.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFolder">
      <MemberSignature Language="C#" Value="public override MailKit.IMailFolder GetFolder (string path, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class MailKit.IMailFolder GetFolder(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MailKit.IMailFolder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">The folder path.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Get the folder for the specified path.
            </summary>
        <returns>The folder.</returns>
        <remarks>
            Gets the folder for the specified path.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected.</para>
          <para>-or-</para>
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not authenticated.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Idle">
      <MemberSignature Language="C#" Value="public void Idle (System.Threading.CancellationToken doneToken, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Idle(valuetype System.Threading.CancellationToken doneToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doneToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="doneToken">The cancellation token used to return to the non-idle state.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Toggle the <see cref="T:MailKit.Net.Imap.ImapClient" /> into the IDLE state.
            </summary>
        <remarks>
          <para>When a client enters the IDLE state, the IMAP server will send
            events to the client as they occur on the selected folder. These events
            may include notifications of new messages arriving, expunge notifications,
            flag changes, etc.</para>
          <para>Due to the nature of the IDLE command, a folder must be selected
            before a client can enter into the IDLE state. This can be done by
            opening a folder using
            <see cref="M:MailKit.MailFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)" />
            or any of the other variants.</para>
          <para>Note: It is especially important to cancel the <paramref name="doneToken" /> before
            cancelling the <paramref name="cancellationToken" /> when using SSL or TLS due to the
            fact that <see cref="T:System.Net.Security.SslStream" /> cannot be polled.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="doneToken" /> must be cancellable (i.e. <see cref="P:System.Threading.CancellationToken.None" /> cannot be used).
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected.</para>
          <para>-or-</para>
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not authenticated.</para>
          <para>-or-</para>
          <para>A <see cref="T:MailKit.Net.Imap.ImapFolder" /> has not been opened.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied to the IDLE command with a NO or BAD response.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server responded with an unexpected token.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the IDLE extension.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IdleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task IdleAsync (System.Threading.CancellationToken doneToken, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task IdleAsync(valuetype System.Threading.CancellationToken doneToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doneToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="doneToken">The cancellation token used to return to the non-idle state.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Asynchronously toggle the <see cref="T:MailKit.Net.Imap.ImapClient" /> into the IDLE state.
            </summary>
        <returns>An asynchronous task context.</returns>
        <remarks>
          <para>When a client enters the IDLE state, the IMAP server will send
            events to the client as they occur on the selected folder. These events
            may include notifications of new messages arriving, expunge notifications,
            flag changes, etc.</para>
          <para>Due to the nature of the IDLE command, a folder must be selected
            before a client can enter into the IDLE state. This can be done by
            opening a folder using
            <see cref="M:MailKit.MailFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)" />
            or any of the other variants.</para>
          <para>Note: It is especially important to cancel the <paramref name="doneToken" /> before
            cancelling the <paramref name="cancellationToken" /> when using SSL or TLS due to the
            fact that <see cref="T:System.Net.Security.SslStream" /> cannot be polled.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="doneToken" /> must be cancellable (i.e. <see cref="P:System.Threading.CancellationToken.None" /> cannot be used).
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected.</para>
          <para>-or-</para>
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not authenticated.</para>
          <para>-or-</para>
          <para>A <see cref="T:MailKit.Net.Imap.ImapFolder" /> has not been opened.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied to the IDLE command with a NO or BAD response.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server responded with an unexpected token.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the IDLE extension.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Inbox">
      <MemberSignature Language="C#" Value="public override MailKit.IMailFolder Inbox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MailKit.IMailFolder Inbox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MailKit.IMailFolder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the Inbox folder.
            </summary>
        <value>The Inbox folder.</value>
        <remarks>
            The Inbox folder is the default folder and always exists.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConnected">
      <MemberSignature Language="C#" Value="public override bool IsConnected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether or not the client is currently connected to an IMAP server.
            </summary>
        <value>
          <c>true</c> if the client is connected; otherwise, <c>false</c>.</value>
        <remarks>
            When an <see cref="T:MailKit.Net.Imap.ImapProtocolException" /> is caught, the connection state of the
            <see cref="T:MailKit.Net.Imap.ImapClient" /> should be checked before continuing.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoOp">
      <MemberSignature Language="C#" Value="public override void NoOp (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void NoOp(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Ping the IMAP server to keep the connection alive.
            </summary>
        <remarks>Mail servers, if left idle for too long, will automatically drop the connection.</remarks>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not connected.</para>
          <para>-or-</para>
          <para>The <see cref="T:MailKit.Net.Imap.ImapClient" /> is not authenticated.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied to the NOOP command with a NO or BAD response.
            </exception>
        <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server responded with an unexpected token.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="OtherNamespaces">
      <MemberSignature Language="C#" Value="public override MailKit.FolderNamespaceCollection OtherNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MailKit.FolderNamespaceCollection OtherNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MailKit.FolderNamespaceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the other namespaces.
            </summary>
        <value>The other namespaces.</value>
        <remarks>
            The other folder namespaces contain other mailbox folders.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersonalNamespaces">
      <MemberSignature Language="C#" Value="public override MailKit.FolderNamespaceCollection PersonalNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MailKit.FolderNamespaceCollection PersonalNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MailKit.FolderNamespaceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the personal namespaces.
            </summary>
        <value>The personal namespaces.</value>
        <remarks>
            The personal folder namespaces contain a user's personal mailbox folders.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Protocol">
      <MemberSignature Language="C#" Value="protected override string Protocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Protocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the protocol supported by the message service.
            </summary>
        <value>The protocol.</value>
        <remarks>
            Gets the protocol supported by the message service.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedNamespaces">
      <MemberSignature Language="C#" Value="public override MailKit.FolderNamespaceCollection SharedNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MailKit.FolderNamespaceCollection SharedNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MailKit.FolderNamespaceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the shared namespaces.
            </summary>
        <value>The shared namespaces.</value>
        <remarks>
            The shared folder namespaces contain mailbox folders that are shared with the user.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsQuotas">
      <MemberSignature Language="C#" Value="public override bool SupportsQuotas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether or not the mail store supports quotas.
            </summary>
        <value>
          <c>true</c> if the mail store supports quotas; otherwise, <c>false</c>.</value>
        <remarks>
            Gets whether or not the mail store supports quotas.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public override object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the lock object used by the default Async methods.
            </summary>
        <value>The lock object.</value>
        <remarks>
            Gets the lock object used by the default Async methods.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreadingAlgorithms">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.HashSet&lt;MailKit.ThreadingAlgorithm&gt; ThreadingAlgorithms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.HashSet`1&lt;valuetype MailKit.ThreadingAlgorithm&gt; ThreadingAlgorithms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;MailKit.ThreadingAlgorithm&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the threading algorithms supported by the IMAP server.
            </summary>
        <value>The authentication mechanisms.</value>
        <remarks>
            The threading algorithms are queried as part of the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)" /> and
            <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)" /> methods.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public override int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the timeout for network streaming operations, in milliseconds.
            </summary>
        <value>The timeout in milliseconds.</value>
        <remarks>
            Gets or sets the underlying socket stream's <see cref="P:System.IO.Stream.ReadTimeout" />
            and <see cref="P:System.IO.Stream.WriteTimeout" /> values.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
